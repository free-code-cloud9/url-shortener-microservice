 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
const isUrl = require('is-url');
const MongoClient = require('mongodb').MongoClient;


if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

function useMongo(callback) {
  MongoClient.connect(process.env.MONGO_URI, function (err, db) {
  if (err) {
    console.log('Unable to connect to the mongoDB server. Error:', err);
  } else {
    callback(db);
  }
});
}

app.route(/^\/new\/(.+)/).get(function(req, res) {
  const url = req.params[0];
  console.log(url);
  const originalUrl = req.protocol + '://' + req.get('host') + '/';
  if (isUrl(url)) {
    useMongo(function(db) {
      const col = db.collection('urls')
      col.findOne({url: url}).then(function(doc) {
        if (!doc) {
          col.find().sort({_id:-1}).limit(1).toArray().then(function(docs) {
            const id = docs.length == 1 ? Number(docs[0]._id) + 1 : 1;
            col.insertOne({
              _id: id,
              url: url
            }).then(function(result) {
              res.send({
                originalUrl: url,
                shortUrl: originalUrl + result.ops[0]._id
              })
            })
          })
        } else {
          res.send({
            originalUrl: url,
            shortUrl: originalUrl + doc._id
          })
        }
      });
    });
  } else {
    res.send({error: 'Invalid url.'});
  }
});

app.route('/:id').get(function(req, res) {
  const id = req.params.id;
  useMongo(function(db) {
    db.collection('urls').findOne({_id: Number(id)}).then(function(doc) {
      console.log(doc);
      if (!doc) {
        res.send({
          error: 'URL not found.'
        });
      } else {
        res.redirect(doc.url);
      }
    });
  });
});

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

